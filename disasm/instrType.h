#pragma once 

enum ErrorType
{
	SUCESS,
	ERROR_UD2,
	ERROR_MAP,
	ERROR_PREFIXES,
	ERROR_MODE,
	ERROR_DISP = -1,
};


enum PreType
{
	Pre_66 = 1,
	Pre_F3 = 2,
	Pre_F2 = 4,
	Pre_66_F2 = 5
};
enum ArgType
{
	Arg_Null = 1,
	Arg_Seg,
	Arg_NoModRM,
	Arg_ModRM,
	Arg_E_ModRM,
};

enum Arg_Attr
{
	nop = 0,
	A, B, C, D, E, F, G, H, I, J, L, M, N, O, P, Q, R, S, U, V, W, X, Y,
	a, b, c, d, dq, p, pd, pi, ps, q, qq, s, sd, ss, si, v, w, x, y, z,

	R_AL, R_CL, R_DL, R_BL, R_AH, R_CH, R_DH, R_BH,
	R_AX, R_CX, R_DX, R_BX, R_SP, R_BP, R_SI, R_DI,

	R_eAX, R_eCX, R_eDX, R_eBX, R_eSP, R_eBP, R_eSI, R_eDI,
	R_rAX, R_rCX, R_rDX, R_rBX, R_rSP, R_rBP, R_rSI, R_rDI,

	Rr_1, Rr_2, Rr_3, Rr_4, Rr_5, Rr_6, Rr_7, Rr_8,
	Rd_1, Rd_2, Rd_3, Rd_4, Rd_5, Rd_6, Rd_7, Rd_8,
	Rb_1, Rb_2, Rb_3, Rb_4, Rb_5, Rb_6, Rb_7, Rb_8,

	S_ES,
	S_CS,
	S_SS,
	S_DS,
	S_FS,
	S_GS,

	Imm1,
	Imm3,
};

enum InstrType
{
	Inst_Gen,
	Inst_Pre,
	Inst_Grp,
	Inst_I64,
	Inst_O64,
	Inst_IO64,
	Inst_Esc,
	Inst_Rex,
	Inst_Vex2,
	Inst_Vex1,
	Inst_2Byte,
	Inst_UD2,
	Inst_Jcc,
	Inst_EModRM,
	Inst_ExPre,
};
enum InstrAttr
{
	P_Grp1,
	P_Grp2,
	P_Grp3,
	P_Grp4,

	Grp_1,
	Grp_2,
	Grp_3,
	Grp_4,
	Grp_5,
	Grp_6,
	Grp_7,
	Grp_8,
	Grp_9,
	Grp_10,
	Grp_11,
	Grp_12,
	Grp_13,
	Grp_14,
	Grp_15,
	Grp_16,
	Grp_17,
	Grp_1A,

	Up_1A,
	Up_1B,
	Up_1C,
	Up_v,
	Up_v1,
	Up_i64,
	Up_o64,
	Up_d64,
	Up_f64,
};
enum OpType
{
	Op_Nop,
	Op_Jcc,
	Op_Sys,
	Op_Data,
	Op_Stack,
	Op_Calc,
	Op_Other,
	Op_IO,
	Op_Pre,
	Op_Flags,
	Op_Logic,
	Op_Vm,
	Op_SSE,
};
enum OPVM
{
	V_VMREAD,
	V_VMWRITE,
	V_VMCALL,
	V_VMLAUNCH,
	V_VMRESUME,
	V_VMXOFF,
	V_VMFUNC,
	V_VMPTRLD,
	V_VMPTRST,
	V_VMCLEAR,
	V_VMXON,
};
enum OPOTHER
{
	O_ARPL,
	O_DAA,
	O_DAS,
	O_AAA,
	O_AAS,
	O_BOUND,
	O_CBW,
	O_CWD,
	O_FWAIT,
	O_ENTER,
	O_LEAVE,
	O_INTO,
	O_AAM,
	O_AAD,
	O_XLAT,
	O_XABORT,
	O_BEGIN,
	O_FXSAVE,
	O_FXRSTOR,
	O_LDMXCSR,
	O_STMXCSR,
	O_XSAVE,
	O_XRSTOR,
	O_XSAVEOPT,
	O_CLFLUSH,
	O_LFENCE,
	O_MFENCE,
	O_SFENCE,
	O_NOP,

	O_BNDLDX,
	O_BNDMOV,
	O_BNDCL,
	O_BNDCU,
	O_BNDSTX,
	O_BNDMK,
	O_BNDCN,
};
enum OPCALC
{
	C_ADD,
	C_OR,
	C_ADC,
	C_SBB,
	C_AND,
	C_SUB,
	C_XOR,
	C_CMP,
	C_TEST,
	C_INC,
	C_DEC,
	C_NOT,
	C_NEG,
	C_MUL,
	C_IMUL,
	C_DIV,
	C_IDIV,
	C_BT,
	C_BTS,
	C_BTR,
	C_BTC,
	C_BSWAP,
	C_BSF,
	C_TZCNT,
	C_BSR,
	C_LZCNT,
	C_XADD,
};
enum OPDATA
{
	D_MOV,
	D_LEA,
	D_XCHG,
	D_MOVSXD,
	D_MOVS,
	D_CMPS,
	D_STOS,
	D_LODS,
	D_SCAS,
	D_CMOVO,
	D_CMOVNO,
	D_CMOVB,
	D_CMOVNB,
	D_CMOVE,
	D_CMOVNE,
	D_CMOVNA,
	D_CMOVA,
	D_CMOVS,
	D_CMOVNS,
	D_CMOVP,
	D_CMOVNP,
	D_CMOVL,
	D_CMOVNL,
	D_CMOVNG,
	D_CMOVG,
	D_CMPXCHG,
	D_MOVZX,
	D_MOVSX,
	D_MOVNTI,
};
enum OPLOGIC
{
	L_ROL,
	L_ROR,
	L_RCL,
	L_RCR,
	L_SHL,
	L_SHR,
	L_SAL,
	L_SAR,
	L_SHLD,
	L_SHRD,
};
enum OPSTACK
{
	K_PUSH,
	K_POP,
	K_PUSHAD,
	K_POPAD,
	K_PUSH_ES,
	K_POP_ES,
	K_PUSH_CS,
	K_PUSH_SS,
	K_POP_SS,
	K_PUSH_DS,
	K_POP_DS,
};
enum OPIO
{
	IO_IN,
	IO_OUT,
	IO_INS,
	IO_OUTS,
};
enum OPPRE
{
	P_LOCK,
	P_REPNE,
	P_REP,
};
enum OPSYS
{
	S_INT3,
	S_INT,
	S_INT1,
	S_HLT,
	S_SYSCALL,
	S_CLTS,
	S_SYSRET,
	S_INVD,
	S_WBINVD,
	S_PREFETCHW,
	S_LAR,
	S_MOV,
	S_WRMSR,
	S_RDTSC,
	S_RDMSR,
	S_RDPMC,
	S_SYSENTER,
	S_SYSEXIT,
	S_GETSEC,
	S_CPUID,
	S_RSM,
	S_LSS,
	S_LFS,
	S_LGS,
	S_LES,
	S_LDS,
	S_SLDT,
	S_STR,
	S_LLDT,
	S_LTR,
	S_VERR,
	S_VERW,
	S_SGDT,
	S_SIDT,
	S_LGDT,
	S_LIDT,
	S_SMSW,
	S_LMSW,
	S_INVLPG,
	S_SWAPGS,
	S_RDTSCP,
	S_RDFSBASE,
	S_RDGSBASE,
	S_WRFSBASE,
	S_WRGSBASE,
	S_RDRAND,
	S_RDSEED,
	S_RDPID,
	S_MONITOR,
	S_MWAIT,
	S_CLAC,
	S_STAC,
	S_ENCLS,
	S_XGETBV,
	S_XSETBV,
	S_XEND,
	S_XTEST,
	S_ENCLU,
	S_PREFETCH,
	S_LSL,
	S_POPCNT,
	S_JMPE,
};
enum OPJCC
{
	J_JO,
	J_JNO,
	J_JC,
	J_JNC,
	J_JE,
	J_JNE,
	J_JNA,
	J_JA,
	J_JS,
	J_JNS,
	J_JP,
	J_JNP,
	J_JL,
	J_JNL,
	J_JNG,
	J_JG,
	J_RET,
	J_IRET,
	J_JCXZ,
	J_LOOP,
	J_LOOPE,
	J_LOOPNE,
	J_CALL,
	J_JMP,
};
enum OPFLAGS
{
	F_CMC,
	F_CLC,
	F_STC,
	F_CLI,
	F_STI,
	F_CLD,
	F_STD,
	F_PUSHF,
	F_POPF,
	F_SAHF,
	F_LAHF,
	F_SETO,
	F_SETNO,
	F_SETC,
	F_SETNC,
	F_SETE,
	F_SETNE,
	F_SETNA,
	F_SETA,
	F_SETS,
	F_SETNS,
	F_SETP,
	F_SETNP,
	F_SETL,
	F_SETNL,
	F_SETNG,
	F_SETG,
};
enum OPSSE
{
	SSE_PSRLW,
	SSE_PSRAW,
	SSE_PSLLW,
	SSE_VPSRLW,
	SSE_VPSRAW,
	SSE_VPSLLW,
	SSE_PSRLD,
	SSE_PSRAD,
	SSE_PSLLD,
	SSE_VPSRLD,
	SSE_VPSRAD,
	SSE_VPSLLD,

	SSE_PSRLQ,
	SSE_PSLLQ,
	SSE_VPSRLQ,
	SSE_VPSRLDQ,
	SSE_VPSLLQ,
	SSE_VPSLLDQ,

	V_MOVAPS,
	V_MOVAPD,
	V_PXOR,

	V_VMOVUPS,
	V_VMOVUPD,
	V_VMOVSS,
	V_VMOVSD,
	V_VMOVLPS,
	V_VMOVLPD,
	V_VMOVSLDUP,
	V_VMOVDDUP,
	V_VUNPCKLPS,
	V_VUNPCKLPD,
	V_VUNPCKHPS,
	V_VUNPCKHPD,
	V_VMOVHPS,
	V_VMOVHPD,
	V_VMOVSHDUP,
	V_VMOVAPS,
	V_VMOVAPD,
	V_CVTPI2PS,
	V_CVTPI2PD,
	V_VCVTSI2SS,
	V_VCVTSI2SD,
	V_VMOVNTPS,
	V_VMOVNTPD,
	V_CVTTPS2PI,
	V_CVTTPD2PI,
	V_VCVTTSS2SI,
	V_VCVTTSD2SI,
	V_CVTPS2PI,
	V_CVTPD2PI,
	V_VCVTSS2SI,
	V_VCVTSD2SI,
	V_VUCOMISS,
	V_VUCOMISD,
	V_VCOMISS,
	V_VCOMISD,
	V_VMOVMSKPS,
	V_VMOVMSKPD,
	V_VSQRTPS,
	V_VSQRTPD,
	V_VSQRTSS,
	V_VSQRTSD,
	V_VRSQRTPS,
	V_VRSQRTSS,
	V_VRCPPS,
	V_VRCPSS,
	V_VANDPS,
	V_VANDPD,
	V_VANDNPS,
	V_VANDNPD,
	V_VORPS,
	V_VORPD,
	V_VXORPS,
	V_VXORPD,
	V_VADDPS,
	V_VADDPD,
	V_VADDSS,
	V_VADDSD,
	V_VMULPS,
	V_VMULPD,
	V_VMULSS,
	V_VMULSD,
	V_VCVTPS2PD,
	V_VCVTPD2PS,
	V_VCVTSS2SD,
	V_VCVTSD2SS,
	V_VCVTDQ2PS,
	V_VCVTPS2DQ,
	V_VCVTTPS2DQ,
	V_VSUBPS,
	V_VSUBPD,
	V_VSUBSS,
	V_VSUBSD,
	V_VMINPS,
	V_VMINPD,
	V_VMINSS,
	V_VMINSD,
	V_VDIVPS,
	V_VDIVPD,
	V_VDIVSS,
	V_VDIVSD,
	V_VMAXPS,
	V_VMAXPD,
	V_VMAXSS,
	V_VMAXSD,
	V_PUNPCKLBW,
	V_VPUNPCKLBW,
	V_PUNPCKLWD,
	V_VPUNPCKLWD,
	V_PUNPCKLDQ,
	V_VPUNPCKLDQ,
	V_PACKSSWB,
	V_VPACKSSWB,
	V_PCMPGTB,
	V_VPCMPGTB,
	V_PCMPGTW,
	V_VPCMPGTW,
	V_PCMPGTD,
	V_VPCMPGTD,
	V_PACKUSWB,
	V_VPACKUSWB,
	V_PUNPCKHBW,
	V_VPUNPCKHBW,
	V_PUNPCKHWD,
	V_VPUNPCKHWD,
	V_PUNPCKHDQ,
	V_VPUNPCKHDQ,
	V_PACKSSDW,
	V_VPACKSSDW,
	V_VPUNPCKLQDQ,
	V_VPUNPCKHQDQ,
	V_MOVQ,
	V_VMOVQ,
	V_VMOVDQA,
	V_VMOVDQU,
	V_PSHUFW,
	V_VPSHUFD,
	V_VPSHUFHW,
	V_VPSHUFLW,
	V_PCMPEQB,
	V_VPCMPEQB,
	V_PCMPEQW,
	V_VPCMPEQW,
	V_PCMPEQD,
	V_VPCMPEQD,
	V_EMMS,
	V_VHADDPD,
	V_VHADDPS,
	V_VHSUBPD,
	V_VHSUBPS,
	V_VCMPPS,
	V_VCMPPD,
	V_VCMPSS,
	V_VCMPSD,
	V_PINSRW,
	V_VPINSRW,
	V_PEXTRW,
	V_VPEXTRW,
	V_VSHUFPS,
	V_VSHUFPD,
	V_VADDSUBPD,
	V_VADDSUBPS,
	V_PSRLW,
	V_VPSRLW,
	V_PSRLD,
	V_VPSRLD,
	V_PSRLQ,
	V_VPSRLQ,
	V_PADDQ,
	V_VPADDQ,
	V_PMULLW,
	V_VPMULLW,
	V_MOVQ2DQ,
	V_MOVDQ2Q,
	V_PMOVMSKB,
	V_VPMOVMSKB,
	V_PSUBUSB,
	V_VPSUBUSB,
	V_PSUBUSW,
	V_VPSUBUSW,
	V_PMINUB,
	V_VPMINUB,
	V_PAND,
	V_VPAND,
	V_PADDUSB,
	V_VPADDUSB,
	V_PADDUSW,
	V_VPADDUSW,
	V_PMAXUB,
	V_VPMAXUB,
	V_PANDN,
	V_VPANDN,
	V_PAVGB,
	V_VPAVGB,
	V_PSRAW,
	V_VPSRAW,
	V_PSRAD,
	V_VPSRAD,
	V_PAVGW,
	V_VPAVGW,
	V_PMULHUW,
	V_VPMULHUW,
	V_PMULHW,
	V_VPMULHW,
	V_VCVTTPD2DQ,
	V_VCVTDQ2PD,
	V_VCVTPD2DQ,
	V_MOVNTQ,
	V_VMOVNTDQ,
	V_PSUBSB,
	V_VPSUBSB,
	V_PSUBSW,
	V_VPSUBSW,
	V_PMINSW,
	V_VPMINSW,
	V_POR,
	V_VPOR,
	V_PADDSB,
	V_VPADDSB,
	V_PADDSW,
	V_VPADDSW,
	V_PMAXSW,
	V_VPMAXSW,
	V_VPXOR,

	V_VLDDQU,
	V_PSLLW,
	V_VPSLLW,
	V_PSLLD,
	V_VPSLLD,
	V_PSLLQ,
	V_VPSLLQ,
	V_PMULUDQ,
	V_VPMULUDQ,
	V_PMADDWD,
	V_VPMADDWD,
	V_PSADBW,
	V_VPSADBW,
	V_MASKMOVQ,
	V_VMASKMOVDQU,
	V_PSUBB,
	V_VPSUBB,
	V_PSUBW,
	V_VPSUBW,
	V_PSUBD,
	V_VPSUBD,
	V_PSUBQ,
	V_VPSUBQ,
	V_PADDB,
	V_VPADDB,
	V_PADDW,
	V_VPADDW,
	V_PADDD,
	V_VPADDD,
};


const char* Hex = "0123456789ABCDEF";

const char* SizePtr[] = {
	0,
	"BYTE-PTR",
	"WORD-PTR",
	0,
	"DWORD-PTR",
	0,
	"OWORD-PTR",
	0,
	"QWORD-PTR",
	0,
	"TWORD-PTR",
	0,
	0,
	0,
	0,
	0,
	"XMM-PTR",
};
const char* Op_Other_str[] = {
	"ARPL",
	"DAA",
	"DAS",
	"AAA",
	"AAS",
	"BOUND",
	"CBW",
	"CWD",
	"FWAIT",
	"ENTER",
	"LEAVE",
	"INTO",
	"AAM",
	"AAD",
	"XLAT",
	"XABORT",
	"BEGIN",
	"FXSAVE",
	"FXRSTOR",
	"LDMXCSR",
	"STMXCSR",
	"XSAVE",
	"XRSTOR",
	"XSAVEOPT",
	"CLFLUSH",
	"LFENCE",
	"MFENCE",
	"SFENCE",
	"NOP",

	"BNDLDX",
	"BNDMOV",
	"BNDCL",
	"BNDCU",
	"BNDSTX",
	"BNDMK",
	"BNDCN",
};
const char* Op_Logic_str[] = {
	"ROL",
	"ROR",
	"RCL",
	"RCR",
	"SHL",
	"SHR",
	"SAL",
	"SAR",
	"SHLD",
	"SHRD",
};
const char* Op_Vm_str[] = {
	"VMREAD",
	"VMWRITE",
	"VMCALL",
	"VMLAUNCH",
	"VMRESUME",
	"VMXOFF",
	"VMFUNC",
	"VMPTRLD",
	"VMPTRST",
	"VMCLEAR",
	"VMXON",
};
const char* Op_Data_str[] = {
	"MOV",
	"LEA",
	"XCHG",
	"MOVSXD",
	"MOVS",
	"CMPS",
	"STOS",
	"LODS",
	"SCAS",
	"CMOVO",
	"CMOVNO",
	"CMOVB",
	"CMOVNB",
	"CMOVE",
	"CMOVNE",
	"CMOVNA",
	"CMOVA",
	"CMOVS",
	"CMOVNS",
	"CMOVP",
	"CMOVNP",
	"CMOVL",
	"CMOVNL",
	"CMOVNG",
	"CMOVG",
	"CMPXCHG",
	"MOVZX",
	"MOVSX",
	"MOVNTI",
};
const char* Op_IO_str[] = {
	"IN",
	"OUT",
	"INS",
	"OUTS",
};
const char* Op_Pre_str[] = {
	"LOCK",
	"REPNE",
	"REP",
};
const char* Op_Sys_str[] = {
	"INT3",
	"INT",
	"INT1",
	"HLT",
	"SYSCALL",
	"CLTS",
	"SYSRET",
	"INVD",
	"WBINVD",
	"PREFETCHW",
	"LAR",
	"MOV",
	"WRMSR",
	"RDTSC",
	"RDMSR",
	"RDPMC",
	"SYSENTER",
	"SYSEXIT",
	"GETSEC",
	"CPUID",
	"RSM",
	"LSS",
	"LFS",
	"LGS",
	"LES",
	"LDS",
	"SLDT",
	"STR",
	"LLDT",
	"LTR",
	"VERR",
	"VERW",
	"SGDT",
	"SIDT",
	"LGDT",
	"LIDT",
	"SMSW",
	"LMSW",
	"INVLPG",
	"SWAPGS",
	"RDTSCP",
	"RDFSBASE",
	"RDGSBASE",
	"WRFSBASE",
	"WRGSBASE",
	"RDRAND",
	"RDSEED",
	"RDPID",
	"MONITOR",
	"MWAIT",
	"CLAC",
	"STAC",
	"ENCLS",
	"XGETBV",
	"XSETBV",
	"XEND",
	"XTEST",
	"ENCLU",
	"PREFETCH",
	"LSL",
	"POPCNT",
	"JMPE",
};
const char* Op_Flags_str[] = {
	"CMC",
	"CLC",
	"STC",
	"CLI",
	"STI",
	"CLD",
	"STD",
	"PUSHF",
	"POPF",
	"SAHF",
	"LAHF",
	"SETO",
	"SETNO",
	"SETC",
	"SETNC",
	"SETE",
	"SETNE",
	"SETNA",
	"SETA",
	"SETS",
	"SETNS",
	"SETP",
	"SETNP",
	"SETL",
	"SETNL",
	"SETNG",
	"SETG",
};
const char* Op_Stack_str[] = {
	"PUSH",
	"POP",
	"PUSHAD",
	"POPAD",
	"PUSH ES",
	"POP ES",
	"PUSH CS",
	"PUSH SS",
	"POP SS",
	"PUSH DS",
	"POP DS",
};
const char* Op_Jcc_str[] = {
	"JO",
	"JNO",
	"JC",
	"JNC",
	"JE",
	"JNE",
	"JNA",
	"JA",
	"JS",
	"JNS",
	"JP",
	"JNP",
	"JL",
	"JNL",
	"JNG",
	"JG",
	"RET",
	"IRET",
	"JCXZ",
	"LOOP",
	"LOOPE",
	"LOOPNE",
	"CALL",
	"JMP",
};
const char* Op_Calc_str[] = {
	"ADD",
	"OR",
	"ADC",
	"SBB",
	"AND",
	"SUB",
	"XOR",
	"CMP",
	"TEST",
	"INC",
	"DEC",
	"NOT",
	"NEG",
	"MUL",
	"IMUL",
	"DIV",
	"IDIV",
	"BT",
	"BTS",
	"BTR",
	"BTC",
	"BSWAP",
	"BSF",
	"TZCNT",
	"BSR",
	"LZCNT",
	"XADD",
};
const char* Op_SSE_str[] = {
	"PSRLW",
	"PSRAW",
	"PSLLW",
	"VPSRLW",
	"VPSRAW",
	"VPSLLW",
	"PSRLD",
	"PSRAD",
	"PSLLD",
	"VPSRLD",
	"VPSRAD",
	"VPSLLD",

	"PSRLQ",
	"PSLLQ",
	"VPSRLQ",
	"VPSRLDQ",
	"VPSLLQ",
	"VPSLLDQ",

	"MOVAPS",
	"MOVAPD",
	"PXOR",

	"VMOVUPS",
	"VMOVUPD",
	"VMOVSS",
	"VMOVSD",
	"VMOVLPS",
	"VMOVLPD",
	"VMOVSLDUP",
	"VMOVDDUP",
	"VUNPCKLPS",
	"VUNPCKLPD",
	"VUNPCKHPS",
	"VUNPCKHPD",
	"VMOVHPS",
	"VMOVHPD",
	"VMOVSHDUP",
	"VMOVAPS",
	"VMOVAPD",
	"CVTPI2PS",
	"CVTPI2PD",
	"VCVTSI2SS",
	"VCVTSI2SD",
	"VMOVNTPS",
	"VMOVNTPD",
	"CVTTPS2PI",
	"CVTTPD2PI",
	"VCVTTSS2SI",
	"VCVTTSD2SI",
	"CVTPS2PI",
	"CVTPD2PI",
	"VCVTSS2SI",
	"VCVTSD2SI",
	"VUCOMISS",
	"VUCOMISD",
	"VCOMISS",
	"VCOMISD",
	"VMOVMSKPS",
	"VMOVMSKPD",
	"VSQRTPS",
	"VSQRTPD",
	"VSQRTSS",
	"VSQRTSD",
	"VRSQRTPS",
	"VRSQRTSS",
	"VRCPPS",
	"VRCPSS",
	"VANDPS",
	"VANDPD",
	"VANDNPS",
	"VANDNPD",
	"VORPS",
	"VORPD",
	"VXORPS",
	"VXORPD",
	"VADDPS",
	"VADDPD",
	"VADDSS",
	"VADDSD",
	"VMULPS",
	"VMULPD",
	"VMULSS",
	"VMULSD",
	"VCVTPS2PD",
	"VCVTPD2PS",
	"VCVTSS2SD",
	"VCVTSD2SS",
	"VCVTDQ2PS",
	"VCVTPS2DQ",
	"VCVTTPS2DQ",
	"VSUBPS",
	"VSUBPD",
	"VSUBSS",
	"VSUBSD",
	"VMINPS",
	"VMINPD",
	"VMINSS",
	"VMINSD",
	"VDIVPS",
	"VDIVPD",
	"VDIVSS",
	"VDIVSD",
	"VMAXPS",
	"VMAXPD",
	"VMAXSS",
	"VMAXSD",
	"PUNPCKLBW",
	"VPUNPCKLBW",
	"PUNPCKLWD",
	"VPUNPCKLWD",
	"PUNPCKLDQ",
	"VPUNPCKLDQ",
	"PACKSSWB",
	"VPACKSSWB",
	"PCMPGTB",
	"VPCMPGTB",
	"PCMPGTW",
	"VPCMPGTW",
	"PCMPGTD",
	"VPCMPGTD",
	"PACKUSWB",
	"VPACKUSWB",
	"PUNPCKHBW",
	"VPUNPCKHBW",
	"PUNPCKHWD",
	"VPUNPCKHWD",
	"PUNPCKHDQ",
	"VPUNPCKHDQ",
	"PACKSSDW",
	"VPACKSSDW",
	"VPUNPCKLQDQ",
	"VPUNPCKHQDQ",
	"MOVQ",
	"VMOVQ",
	"VMOVDQA",
	"VMOVDQU",
	"PSHUFW",
	"VPSHUFD",
	"VPSHUFHW",
	"VPSHUFLW",
	"PCMPEQB",
	"VPCMPEQB",
	"PCMPEQW",
	"VPCMPEQW",
	"PCMPEQD",
	"VPCMPEQD",
	"EMMS",
	"VHADDPD",
	"VHADDPS",
	"VHSUBPD",
	"VHSUBPS",
	"VCMPPS",
	"VCMPPD",
	"VCMPSS",
	"VCMPSD",
	"PINSRW",
	"VPINSRW",
	"PEXTRW",
	"VPEXTRW",
	"VSHUFPS",
	"VSHUFPD",
	"VADDSUBPD",
	"VADDSUBPS",
	"PSRLW",
	"VPSRLW",
	"PSRLD",
	"VPSRLD",
	"PSRLQ",
	"VPSRLQ",
	"PADDQ",
	"VPADDQ",
	"PMULLW",
	"VPMULLW",
	"MOVQ2DQ",
	"MOVDQ2Q",
	"PMOVMSKB",
	"VPMOVMSKB",
	"PSUBUSB",
	"VPSUBUSB",
	"PSUBUSW",
	"VPSUBUSW",
	"PMINUB",
	"VPMINUB",
	"PAND",
	"VPAND",
	"PADDUSB",
	"VPADDUSB",
	"PADDUSW",
	"VPADDUSW",
	"PMAXUB",
	"VPMAXUB",
	"PANDN",
	"VPANDN",
	"PAVGB",
	"VPAVGB",
	"PSRAW",
	"VPSRAW",
	"PSRAD",
	"VPSRAD",
	"PAVGW",
	"VPAVGW",
	"PMULHUW",
	"VPMULHUW",
	"PMULHW",
	"VPMULHW",
	"VCVTTPD2DQ",
	"VCVTDQ2PD",
	"VCVTPD2DQ",
	"MOVNTQ",
	"VMOVNTDQ",
	"PSUBSB",
	"VPSUBSB",
	"PSUBSW",
	"VPSUBSW",
	"PMINSW",
	"VPMINSW",
	"POR",
	"VPOR",
	"PADDSB",
	"VPADDSB",
	"PADDSW",
	"VPADDSW",
	"PMAXSW",
	"VPMAXSW",
	"VPXOR",

	"VLDDQU",
	"PSLLW",
	"VPSLLW",
	"PSLLD",
	"VPSLLD",
	"PSLLQ",
	"VPSLLQ",
	"PMULUDQ",
	"VPMULUDQ",
	"PMADDWD",
	"VPMADDWD",
	"PSADBW",
	"VPSADBW",
	"MASKMOVQ",
	"VMASKMOVDQU",
	"PSUBB",
	"VPSUBB",
	"PSUBW",
	"VPSUBW",
	"PSUBD",
	"VPSUBD",
	"PSUBQ",
	"VPSUBQ",
	"PADDB",
	"VPADDB",
	"PADDW",
	"VPADDW",
	"PADDD",
	"VPADDD",
};

const char* PreSeg[] = {
	"ES",
	"CS",
	"SS",
	"DS",
	"FS",
	"GS",
};
const char* DefSeg[] = {
	"DS",
	"DS",
	"DS",
	"DS",
	"SS",
	"SS",
	"ES",
	"ES",
};

const char* Reg32[][8] = {
	{"ES", "CS", "SS", "DS", "FS", "GS"},
	{"AL", "CL", "DL", "BL", "AH", "CH", "DH", "BH"},
	{"AX", "CX", "DX", "BX", "SP", "BP", "SI", "DI"},
	{0},
	{"EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI"},
	{"CR0", "CR1", "CR2", "CR3", "CR4", "CR5", "CR6", "CR7"},
	{"DR0", "DR1", "DR2", "DR3", "DR4", "DR5", "DR6", "DR7"},
};
const char* Reg64[][16] = {
	{"ES", "CS", "SS", "DS", "FS", "GS"},
	{"AL", "CL", "DL", "BL", "SPL", "BPL", "SIL", "DIL", "R8B", "R9B", "R10B", "R11B", "R12B", "R13B", "R14B", "R15B"},
	{"AX", "CX", "DX", "BX", "SP", "BP", "SI", "DI", "R8W", "R9W", "R10W", "R11W", "R12W", "R13W", "R14W", "R15W"},
	{0},
	{"EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI", "R8D", "R9D", "R10D", "R11D", "R12D", "R13D", "R14D", "R15D"},
	{0},
	{0},
	{0},
	{"RAX", "RCX", "RDX", "RBX", "RSP", "RBP", "RSI", "RDI", "R8", "R9", "R10", "R11", "R12", "R13", "R14", "R15"},
	{"CR0", "CR1", "CR2", "CR3", "CR4", "CR5", "CR6", "CR7", "CR8", "CR9", "CR10", "CR11", "CR12", "CR13", "CR14", "CR15"},
	{"DR0", "DR1", "DR2", "DR3", "DR4", "DR5", "DR6", "DR7", "DR8", "DR9", "DR10", "DR11", "DR12", "DR13", "DR14", "DR15"},
	{0},
	{0},
	{0},
	{0},
	{0},
	{"XMM0", "XMM1", "XMM2", "XMM3", "XMM4", "XMM5", "XMM6", "XMM7", "XMM8", "XMM9", "XMM10", "XMM11", "XMM12", "XMM13", "XMM14", "XMM15"},
};

char const** OpStr[] = {
	0,
	Op_Jcc_str,
	Op_Sys_str,
	Op_Data_str,
	Op_Stack_str,
	Op_Calc_str,
	Op_Other_str,
	Op_IO_str,
	Op_Pre_str,
	Op_Flags_str,
	Op_Logic_str,
	Op_Vm_str,
	Op_SSE_str,
};


// extern OpcodeMap OneByte[];
// extern OpcodeMap TwoByte[];
// extern OpcodeMap ThreeByte[];
// extern OpcodeMap ReMapGroup1[][8];
// extern OpcodeMap ReMapGroup2[][8];
// extern OpcodeMap ReMapGroup3[][8];
// extern OpcodeMap ReMapGroup4[][8];
// extern OpcodeMap ReMapGroup5[][8];
// extern OpcodeMap ReMapGroup6[][8];
// extern OpcodeMap ReMapGroup7[][8];
// extern OpcodeMap ReMapGroup8[][8];
// extern OpcodeMap ReMapGroup9[][8];
// extern OpcodeMap ReMapGroup10[][8];
// extern OpcodeMap ReMapGroup11[][8];
// extern OpcodeMap ReMapGroup12[][8];
// extern OpcodeMap ReMapGroup13[][8];
// extern OpcodeMap ReMapGroup14[][8];
// extern OpcodeMap ReMapGroup15[][8];
// extern OpcodeMap ReMapGroup16[][8];
// extern OpcodeMap ReMapGroup1A[][8];
// extern OpcodeMap ReEscape[];
// extern OpcodeMap ReMapVEX2[];
// extern OpcodeMap ReMapVEX1[];
// extern const char **OpStr[];
// extern const char *Hex;
// extern const char *SizePtr[17];
// extern const char *PreSeg[16];
// extern const char *DefSeg[16];
// extern const char *Reg32[][8];
// extern const char *Reg64[][16];